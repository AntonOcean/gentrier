<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.1">

    <issue
        id="MissingPermission"
        severity="Error"
        message="Missing permissions required by FusedLocationProviderClient.requestLocationUpdates: android.permission.ACCESS_COARSE_LOCATION or android.permission.ACCESS_FINE_LOCATION"
        category="Correctness"
        priority="9"
        summary="Missing Permissions"
        explanation="This check scans through your code and libraries and looks at the APIs being used, and checks this against the set of permissions required to access those APIs. If the code using those APIs is called at runtime, then the program will crash.&#xA;&#xA;Furthermore, for permissions that are revocable (with `targetSdkVersion` 23), client code must also be prepared to handle the calls throwing an exception if the user rejects the request for permission at runtime."
        errorLine1="            fusedLocationClient.requestLocationUpdates("
        errorLine2="            ^">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/service/LocationTrackingService.kt"
            line="146"
            column="13"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Field requires API level 26 (current min is 24): `java.time.format.DateTimeFormatter#ISO_LOCAL_DATE_TIME`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="    private val formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME"
        errorLine2="                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/local/converter/DateTimeConverters.kt"
            line="8"
            column="29"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `java.time.LocalDateTime#parse`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return value?.let { LocalDateTime.parse(it, formatter) }"
        errorLine2="                                          ~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/local/converter/DateTimeConverters.kt"
            line="12"
            column="43"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `java.time.LocalDateTime#format`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="        return date?.format(formatter)"
        errorLine2="                     ~~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/local/converter/DateTimeConverters.kt"
            line="17"
            column="22"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="                        timestamp = LocalDateTime.now()"
        errorLine2="                                                  ~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/service/LocationTrackingService.kt"
            line="63"
            column="51"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            startTime = LocalDateTime.now(),"
        errorLine2="                                      ~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/repository/SkiSessionRepositoryImpl.kt"
            line="24"
            column="39"/>
    </issue>

    <issue
        id="NewApi"
        severity="Error"
        message="Call requires API level 26 (current min is 24): `java.time.LocalDateTime#now`"
        category="Correctness"
        priority="6"
        summary="Calling new methods on older versions"
        explanation="This check scans through all the Android API calls in the application and warns about any calls that are not available on **all** versions targeted by this application (according to its minimum SDK attribute in the manifest).&#xA;&#xA;If you really want to use this API and don&apos;t need to support older devices just set the `minSdkVersion` in your `build.gradle` or `AndroidManifest.xml` files.&#xA;&#xA;If your code is **deliberately** accessing newer APIs, and you have ensured (e.g. with conditional execution) that this code will only ever be called on a supported platform, then you can annotate your class or method with the `@TargetApi` annotation specifying the local minimum SDK to apply, such as `@TargetApi(11)`, such that this check considers 11 rather than your manifest file&apos;s minimum SDK as the required API level.&#xA;&#xA;If you are deliberately setting `android:` attributes in style definitions, make sure you place this in a `values-v`*NN* folder in order to avoid running into runtime conflicts on certain devices where manufacturers have added custom attributes whose ids conflict with the new ones on later platforms.&#xA;&#xA;Similarly, you can use tools:targetApi=&quot;11&quot; in an XML file to indicate that the element will only be inflated in an adequate context."
        errorLine1="            endTime = LocalDateTime.now(),"
        errorLine2="                                    ~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/src/main/java/com/example/gentrier/data/repository/SkiSessionRepositoryImpl.kt"
            line="39"
            column="37"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.google.android.gms:play-services-location than 21.0.1 is available: 21.3.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    implementation(&quot;com.google.android.gms:play-services-location:21.0.1&quot;)"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/build.gradle.kts"
            line="54"
            column="21"/>
    </issue>

    <issue
        id="KaptUsageInsteadOfKsp"
        severity="Warning"
        message="This library supports using KSP instead of kapt, which greatly improves performance. Learn more: https://developer.android.com/studio/build/migrate-to-ksp"
        category="Performance"
        priority="4"
        summary="Kapt usage should be replaced with KSP"
        explanation="KSP is a more efficient replacement for kapt. For libraries that support both, KSP should be used to improve build times."
        url="https://developer.android.com/studio/build/migrate-to-ksp"
        urls="https://developer.android.com/studio/build/migrate-to-ksp"
        errorLine1="    kapt(libs.androidx.room.compiler)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/build.gradle.kts"
            line="51"
            column="5"/>
    </issue>

    <issue
        id="UseTomlInstead"
        severity="Warning"
        message="Use version catalog instead"
        category="Productivity"
        priority="4"
        summary="Use TOML Version Catalog Instead"
        explanation="If your project is using a `libs.versions.toml` file, you should place all Gradle dependencies in the TOML file. This lint check looks for version declarations outside of the TOML file and suggests moving them (and in the IDE, provides a quickfix to performing the operation automatically)."
        errorLine1="    implementation(&quot;com.google.android.gms:play-services-location:21.0.1&quot;)"
        errorLine2="                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/Users/a.tsitulskii/AndroidStudioProjects/gentrier/data/build.gradle.kts"
            line="54"
            column="21"/>
    </issue>

</issues>
